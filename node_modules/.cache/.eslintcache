[{"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\index.js":"1","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\App.js":"2","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\reportWebVitals.js":"3","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\History.js":"4","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\Map.js":"5","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\Dashboard.js":"6"},{"size":517,"mtime":1652974152861,"results":"7","hashOfConfig":"8"},{"size":3049,"mtime":1652974152852,"results":"9","hashOfConfig":"8"},{"size":375,"mtime":1652974152864,"results":"10","hashOfConfig":"8"},{"size":5622,"mtime":1652974152858,"results":"11","hashOfConfig":"8"},{"size":1965,"mtime":1652974152860,"results":"12","hashOfConfig":"8"},{"size":7444,"mtime":1652974152856,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1g0aexu",{"filePath":"16","messages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\index.js",[],"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\App.js",[],"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\reportWebVitals.js",[],"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\History.js",[],"C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\Map.js",["28"],"import {WorldMap} from \"react-svg-worldmap\";\r\nimport './Map.css'\r\nimport {useContext, useState} from \"react\";\r\nimport {CountriesContext} from \"./App\";\r\n\r\nexport const spacing = (x) => {\r\n    x = x.replace(/([A-Z])/g,\" $1\")\r\n    x = x.charAt(0).toUpperCase() + x.slice(1)\r\n    return x\r\n}\r\n\r\nfunction Map() {\r\n    let [selected,setSelected] = useState('cases')\r\n    let map=[]\r\n    const [data,country,setCountry] = useContext(CountriesContext)\r\n\r\n    map = data.map(x => {\r\n        if(x.countryInfo.iso2 !== null) {\r\n            return ({country: x.countryInfo.iso2.toLowerCase(), value: x[selected]})\r\n        }\r\n        else {return ({country: '0', value: ''})}\r\n    })\r\n    map=map.filter(x=>{return(x.country !== '0')})\r\n\r\n    const clickAction = ({countryCode,countryName}) => {\r\n        setCountry({code: countryCode,name: countryName})\r\n    };\r\n\r\n    return(\r\n        <div className='MapContainer'>\r\n        <WorldMap\r\n            data={map}\r\n            size='responsive'\r\n            color='red'\r\n            backgroundColor='#101520'\r\n            frameColor='white'\r\n            frame='true'\r\n            title={<div style={{padding: '2em'}}>\r\n                    <select id=\"country\" value={selected} onChange={(e)=>{setSelected(e.target.value)}}>\r\n                        {\r\n                            Object.keys(data[0]).filter((x)=>{\r\n                                return(Number.isFinite(data[0][x]) && x!=='updated')\r\n                            }).map((x,index)=>{\r\n                                return(<option key={index}>{spacing(x)}</option>)\r\n                            })\r\n                        }\r\n                    </select>\r\n                </div>\r\n                }\r\n            borderColor='white'\r\n            onClickFunction={clickAction}\r\n            style={{margin: '0 auto'}}\r\n        />\r\n            <p style={{fontSize: '0.8em',padding: 0,margin: 0}}>click on a country</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map;","C:\\Users\\Luca\\Desktop\\Nuova cartella\\Covid-Data\\src\\Dashboard.js",["29"],"import './Dashboard.css'\r\nimport {\r\n    VictoryAxis,\r\n    VictoryBar,\r\n    VictoryChart,\r\n    VictoryLabel,\r\n    VictoryTheme\r\n} from \"victory\";\r\nimport React, {useContext} from 'react'\r\nimport useAxios from \"axios-hooks\";\r\nimport {CountriesContext, ErrorPanel, LoaderWidget} from \"./App\";\r\nimport {useState} from \"react\";\r\nimport Select from \"react-select\";\r\nimport makeAnimated from 'react-select/animated';\r\nimport {spacing} from \"./Map\";\r\n\r\n\r\nexport function numberWithCommas(x) {\r\n    return x.toString().replace(/\\B(?<!\\.\\d*)(?=(\\d{3})+(?!\\d))/g, \",\");\r\n}\r\n\r\nfunction Dashboard(){\r\n    let [selected,setSelected] = useState(['cases','deaths'])\r\n\r\n    let[dataC,country,setCountry] = useContext(CountriesContext)\r\n    let dataB = []\r\n    dataC.forEach((x) => {\r\n        if(x.countryInfo.iso2 === country.code){\r\n            dataB=selected.map((v)=>{return({x: v,y: x[v]})})\r\n        }\r\n        else{}\r\n    })\r\n\r\n    let theme = VictoryTheme.grayscale\r\n    theme.axis.style.axis.stroke='white'\r\n    theme.area.style.labels.fill='white'\r\n\r\n    let [{data,loading,error}] = useAxios('https://disease.sh/v3/covid-19/all')\r\n    if (loading) return <LoaderWidget/>\r\n    if (error) return <ErrorPanel message={error} />\r\n    let dataA=selected.map((v)=>{return({x: v,y: data[v]})})\r\n\r\n    let options = []\r\n    options=Object.keys(data).filter((x)=>{\r\n        return(Number.isFinite(data[x]) && x!=='updated')\r\n    }).map((x)=>{\r\n        return({value: x,label: spacing(x)})\r\n    })\r\n\r\n    const height = 512;\r\n    const width = 512;\r\n\r\n    let jus = ''\r\n    if(country.name !== ''){jus='space-around'}\r\n    else{jus='center'}\r\n\r\n    const Styles = {\r\n        control: (provided,state) => ({ ...provided, backgroundColor: \"grey\",\r\n            border: state.isFocused? '' : 'solid darkslategrey 1px',\r\n            \":hover\": {\r\n                border: \"white solid 1px\"\r\n            },\r\n            width: '80vw',\r\n            maxWidth: '500px'\r\n        }),\r\n        option: (styles, { isDisabled, isFocused }) => {\r\n            return {\r\n                ...styles,\r\n                backgroundColor: isFocused ? \"darkslategrey\" : undefined,\r\n                color: isFocused ? \"white\" : \"#dbdbdb\",\r\n                cursor: isDisabled ? \"not-allowed\" : \"default\"\r\n            };\r\n        },\r\n\r\n        clearIndicator: (styles) => ({\r\n            ...styles,\r\n            color: \"red\",\r\n            \":hover\": {\r\n                color: \"white\",\r\n                backgroundColor: \"rgba(256,0,0,0.3)\"\r\n            }\r\n        }),\r\n\r\n        menu: (styles) => ({\r\n            ...styles,\r\n            backgroundColor: \"grey\",\r\n            color: \"white\",\r\n            width: '80vw',\r\n            maxWidth: '500px'\r\n        }),\r\n\r\n        multiValue: (styles) => {\r\n            return {\r\n                ...styles,\r\n                backgroundColor: \"darkslategrey\"\r\n            };\r\n        },\r\n        multiValueLabel: (styles) => ({\r\n            ...styles,\r\n            color: \"white\"\r\n        }),\r\n        multiValueRemove: (styles) => ({\r\n            ...styles,\r\n            color: \"red\",\r\n            \":hover\": {\r\n                backgroundColor: \"rgba(256,0,0,0.3)\",\r\n                color: \"white\"\r\n            }\r\n        })\r\n    };\r\n\r\n\r\n    const  handleChange = (option) => {\r\n        option=option.map((x)=>{return(x.value)})\r\n        setSelected(option)\r\n    };\r\n\r\n    return(\r\n        <div>\r\n            <div className='selectContainer'>\r\n                <Select options={options} isMulti isSearchable isClearable\r\n                        defaultValue={[options[0],options[2]]}\r\n                        closeMenuOnSelect={false}\r\n                        components={makeAnimated()}\r\n                        styles={Styles}\r\n                        onChange={handleChange}\r\n                />\r\n            </div>\r\n            <div style={{display: 'flex',width: '90vw',maxWidth:'500px',margin: '0 auto',justifyContent: `${jus}`}}>\r\n                <h1 style={{maxWidth:'200px'}}>{country.name}</h1>\r\n                <h1>World</h1>\r\n            </div>\r\n            <svg viewBox='0 0 512 512' width='100%' height=\"45vh\">\r\n                <path className='virus' fill=\"currentColor\" opacity='0.2' d=\"M483.55,227.55H462c-50.68,0-76.07-61.27-40.23-97.11L437,115.19A28.44,28.44,0,0,0,396.8,75L381.56,90.22c-35.84,35.83-97.11,10.45-97.11-40.23V28.44a28.45,28.45,0,0,0-56.9,0V50c0,50.68-61.27,76.06-97.11,40.23L115.2,75A28.44,28.44,0,0,0,75,115.19l15.25,15.25c35.84,35.84,10.45,97.11-40.23,97.11H28.45a28.45,28.45,0,1,0,0,56.89H50c50.68,0,76.07,61.28,40.23,97.12L75,396.8A28.45,28.45,0,0,0,115.2,437l15.24-15.25c35.84-35.84,97.11-10.45,97.11,40.23v21.54a28.45,28.45,0,0,0,56.9,0V462c0-50.68,61.27-76.07,97.11-40.23L396.8,437A28.45,28.45,0,0,0,437,396.8l-15.25-15.24c-35.84-35.84-10.45-97.12,40.23-97.12h21.54a28.45,28.45,0,1,0,0-56.89ZM224,272a48,48,0,1,1,48-48A48,48,0,0,1,224,272Zm80,56a24,24,0,1,1,24-24A24,24,0,0,1,304,328Z\"/>\r\n                <VictoryChart horizontal\r\n                              height={height}\r\n                              width={width}\r\n                              padding={40}\r\n                              standalone={false}\r\n                              animate={{\r\n                                  duration: 2000,\r\n                                  onLoad: { duration: 1000 }\r\n                              }}\r\n                              domainPadding={50}\r\n                >\r\n                    <VictoryBar\r\n                        style={{ data: { fill: \"darkred\" } }}\r\n                        data={dataA}\r\n                        y={(data) => (Math.abs(data.y))}\r\n                        labels={({ datum }) => (`${numberWithCommas(datum.y)}`)}\r\n                        barWidth={50}\r\n                    />\r\n\r\n                    <VictoryBar\r\n                        style={{ data: { fill: \"red\" } }}\r\n                        data={dataB}\r\n                        y={(data) => (-Math.abs(data.y))}\r\n                        labels={({ datum }) => (`${numberWithCommas(datum.y)}`)}\r\n                        barWidth={50}\r\n                    />\r\n\r\n                    <VictoryAxis\r\n                        width={width}\r\n                        style={{\r\n                            axis: { stroke: \"white\" },\r\n                            ticks: { stroke: \"white\" },\r\n                            tickLabels: { fontSize: 15, fill: \"white\" }\r\n                        }}\r\n                        tickLabelComponent={\r\n                            <VictoryLabel\r\n                                dx={0}\r\n                                dy={-35}\r\n                                textAnchor=\"end\"\r\n                            />\r\n                        }\r\n                        tickValues={dataA.map((point) => point.x).reverse()}\r\n                    />\r\n                    <VictoryAxis\r\n                        orientation={\"top\"}\r\n                        dependentAxis\r\n                        tickFormat={(x) => {\r\n                            let exp = ''\r\n                            x=Math.abs(x)\r\n                            if(x>=1000){exp = 'k';x=x/1000}\r\n                            if(x>=1000){exp = 'M';x=x/1000}\r\n                            if(x>=1000){exp = 'B';x=x/1000}\r\n                            return(`${numberWithCommas(x)}${exp}`)\r\n                        }}\r\n                    />\r\n                </VictoryChart>\r\n            </svg>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dashboard;",{"ruleId":"30","severity":1,"message":"31","line":15,"column":17,"nodeType":"32","messageId":"33","endLine":15,"endColumn":24},{"ruleId":"30","severity":1,"message":"34","line":25,"column":23,"nodeType":"32","messageId":"33","endLine":25,"endColumn":33},"no-unused-vars","'country' is assigned a value but never used.","Identifier","unusedVar","'setCountry' is assigned a value but never used."]